// <auto-generated />
using System;
using Assessment.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assessment.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230903030426_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Assessment.Domain.Entities.Beer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("AlchoholPercentage")
                        .HasColumnType("real");

                    b.Property<int>("BreweryStockId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Beer", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlchoholPercentage = 6.6f,
                            BreweryStockId = 1,
                            Name = "Leffe Blonde",
                            Price = 2.2f
                        },
                        new
                        {
                            Id = 2,
                            AlchoholPercentage = 9f,
                            BreweryStockId = 2,
                            Name = "Chimay Bleue (Blue Cap)",
                            Price = 58.38f
                        },
                        new
                        {
                            Id = 3,
                            AlchoholPercentage = 4.8f,
                            BreweryStockId = 3,
                            Name = "Chimay Dorée (Gold)",
                            Price = 2.1f
                        },
                        new
                        {
                            Id = 4,
                            AlchoholPercentage = 7f,
                            BreweryStockId = 4,
                            Name = "Chimay Rouge (Red Cap)",
                            Price = 2.1f
                        },
                        new
                        {
                            Id = 5,
                            AlchoholPercentage = 8f,
                            BreweryStockId = 5,
                            Name = "Chimay Triple (White Cap)",
                            Price = 2.2f
                        });
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Brewery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Brewery", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Abbaye de Leffe"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bières de Chimay"
                        });
                });

            modelBuilder.Entity("Assessment.Domain.Entities.BreweryStock", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<int>("BreweryId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "BeerId", "BreweryId");

                    b.HasIndex("BeerId")
                        .IsUnique();

                    b.HasIndex("BreweryId");

                    b.ToTable("BreweryStock", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeerId = 1,
                            BreweryId = 1,
                            Count = 90
                        },
                        new
                        {
                            Id = 2,
                            BeerId = 2,
                            BreweryId = 2,
                            Count = 50
                        },
                        new
                        {
                            Id = 3,
                            BeerId = 3,
                            BreweryId = 2,
                            Count = 20
                        },
                        new
                        {
                            Id = 4,
                            BeerId = 4,
                            BreweryId = 2,
                            Count = 30
                        },
                        new
                        {
                            Id = 5,
                            BeerId = 5,
                            BreweryId = 2,
                            Count = 50
                        });
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Client", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "James Peeters"
                        });
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<int>("BreweryId")
                        .HasColumnType("int");

                    b.Property<int>("WholesalerId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "BeerId", "BreweryId", "WholesalerId");

                    b.HasIndex("BeerId");

                    b.HasIndex("BreweryId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("Transaction", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BeerId = 1,
                            BreweryId = 1,
                            WholesalerId = 1,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Wholesaler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Wholesaler", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "GeneDrinks"
                        });
                });

            modelBuilder.Entity("Assessment.Domain.Entities.WholesalerSale", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("WholesalerId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("UnitePrice")
                        .HasColumnType("real");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "WholesalerId", "BeerId", "ClientId");

                    b.HasIndex("BeerId");

                    b.HasIndex("ClientId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("WholesalerSales", (string)null);
                });

            modelBuilder.Entity("Assessment.Domain.Entities.WholesalerStock", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("WholesalerId")
                        .HasColumnType("int");

                    b.Property<int>("BeerId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id", "WholesalerId");

                    b.HasIndex("BeerId");

                    b.HasIndex("WholesalerId");

                    b.ToTable("WholesalerStock", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            WholesalerId = 1,
                            BeerId = 1,
                            Count = 10
                        });
                });

            modelBuilder.Entity("Assessment.Domain.Entities.BreweryStock", b =>
                {
                    b.HasOne("Assessment.Domain.Entities.Beer", "Beer")
                        .WithOne("BreweryStock")
                        .HasForeignKey("Assessment.Domain.Entities.BreweryStock", "BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Domain.Entities.Brewery", "Brewery")
                        .WithMany("Stocks")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Brewery");
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Assessment.Domain.Entities.Beer", "Beer")
                        .WithMany()
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Domain.Entities.Brewery", "Brewery")
                        .WithMany("Sales")
                        .HasForeignKey("BreweryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Domain.Entities.Wholesaler", "WholeSaler")
                        .WithMany("Purchase")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Brewery");

                    b.Navigation("WholeSaler");
                });

            modelBuilder.Entity("Assessment.Domain.Entities.WholesalerSale", b =>
                {
                    b.HasOne("Assessment.Domain.Entities.Beer", "SoldBeer")
                        .WithMany("WholesalerSales")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Domain.Entities.Client", "Client")
                        .WithMany("Purchases")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Domain.Entities.Wholesaler", "Wholesaler")
                        .WithMany("Sales")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("SoldBeer");

                    b.Navigation("Wholesaler");
                });

            modelBuilder.Entity("Assessment.Domain.Entities.WholesalerStock", b =>
                {
                    b.HasOne("Assessment.Domain.Entities.Beer", "Beer")
                        .WithMany("Stocks")
                        .HasForeignKey("BeerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assessment.Domain.Entities.Wholesaler", "Wholesaler")
                        .WithMany("Stocks")
                        .HasForeignKey("WholesalerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Beer");

                    b.Navigation("Wholesaler");
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Beer", b =>
                {
                    b.Navigation("BreweryStock")
                        .IsRequired();

                    b.Navigation("Stocks");

                    b.Navigation("WholesalerSales");
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Brewery", b =>
                {
                    b.Navigation("Sales");

                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Client", b =>
                {
                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("Assessment.Domain.Entities.Wholesaler", b =>
                {
                    b.Navigation("Purchase");

                    b.Navigation("Sales");

                    b.Navigation("Stocks");
                });
#pragma warning restore 612, 618
        }
    }
}
